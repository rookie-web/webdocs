import{_ as t,o as e,c as a,Q as o}from"./chunks/framework.7d3ea279.js";const u=JSON.parse('{"title":"计算机网络相关","description":"","frontmatter":{},"headers":[],"relativePath":"interview/network/index.md","filePath":"interview/network/index.md","lastUpdated":1699154526000}'),i={name:"interview/network/index.md"},l=o('<h1 id="计算机网络相关" tabindex="-1">计算机网络相关 <a class="header-anchor" href="#计算机网络相关" aria-label="Permalink to &quot;计算机网络相关&quot;">​</a></h1><h2 id="ajax原理" tabindex="-1">ajax原理 <a class="header-anchor" href="#ajax原理" aria-label="Permalink to &quot;ajax原理&quot;">​</a></h2><p>核心是<code>XMLHttpRequest</code>对象</p><ol><li>创建 <code>XMLHttpRequest</code> 对象</li><li>调用 <code>open()</code> 方法，传入请求方法，请求地址，是否异步和用户认证信息参数</li><li>添加请求头信息，监听响应函数。根据 <code>onreadystatechange</code> 返回的状态处理响应数据。5种状态分别是未初始化，启动，发送，接收，完成。</li><li>调用 <code>send()</code>方法发送请求</li></ol><h2 id="http2-0新特性" tabindex="-1">http2.0新特性 <a class="header-anchor" href="#http2-0新特性" aria-label="Permalink to &quot;http2.0新特性&quot;">​</a></h2><ol><li>数据格式支持二进制，1.x基于文本格式</li><li>多路复用。单一的连接发起多重的请求和响应，通过id区分请求，共享同一个链接</li><li>头部信息<code>gzip</code>压缩。</li><li>服务端推送。对客户端的请求发起多个响应</li></ol><h2 id="http与https-区别" tabindex="-1">http与https 区别 <a class="header-anchor" href="#http与https-区别" aria-label="Permalink to &quot;http与https 区别&quot;">​</a></h2><ol><li>http 采用明文传输，https通过<code>ssl</code>加密传输，安全性更高</li><li>http的连接很简单，是无状态的；HTTPS协议是由<code>SSL+HTTP</code>协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。</li></ol>',8),d=[l];function r(c,n,h,s,p,_){return e(),a("div",null,d)}const m=t(i,[["render",r]]);export{u as __pageData,m as default};
