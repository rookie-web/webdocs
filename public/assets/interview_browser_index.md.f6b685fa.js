import{_ as s,o as a,c as e,Q as o}from"./chunks/framework.7d3ea279.js";const E=JSON.parse('{"title":"浏览器相关","description":"","frontmatter":{},"headers":[],"relativePath":"interview/browser/index.md","filePath":"interview/browser/index.md","lastUpdated":1699195666000}'),l={name:"interview/browser/index.md"},t=o('<h1 id="浏览器相关" tabindex="-1">浏览器相关 <a class="header-anchor" href="#浏览器相关" aria-label="Permalink to &quot;浏览器相关&quot;">​</a></h1><h2 id="iframe跨域通信" tabindex="-1">iframe跨域通信 <a class="header-anchor" href="#iframe跨域通信" aria-label="Permalink to &quot;iframe跨域通信&quot;">​</a></h2><ol><li>通过<code>document.domain</code>强制设置同一个主域</li><li><code>postMessage</code>发送数据，另一个通过监听<code>message</code>事件来接收</li><li>通过中间页通信。不同域之间利用iframe的<code>location.hash</code>传值，相同域之间直接js访问来通信。</li></ol><h2 id="强缓存与协商缓存" tabindex="-1">强缓存与协商缓存 <a class="header-anchor" href="#强缓存与协商缓存" aria-label="Permalink to &quot;强缓存与协商缓存&quot;">​</a></h2><blockquote><p>强缓存就是浏览器本地根据服务器设置的过期时间来判断是否使用缓存，未过期则从本地缓存里面拿资源，过期则重新请求服务器拿资源</p></blockquote><p>强缓存根据响应头<code>Cache-control</code>或<code>Expires</code>字段来控制，表示缓存的时间，单位是毫秒。Cache-control优先级高</p><blockquote><p>协商缓存就是浏览器每次都向服务器发送请求，由服务器来告诉浏览器是从缓存里面拿资源还是返回最新资源给浏览器使用</p></blockquote><p>协商缓存由服务器来决定是否使用缓存资源，初次请求后响应头会携带<code>Etag</code>标识，再次请求时请求头带<code>If-None-Match</code>字段，值为Etag的值，服务器对比之后不一致则返回最新资源，否则使用缓存资源</p><h2 id="cookie-localstorage-sessionstorage的区别" tabindex="-1">cookie localStorage sessionStorage的区别 <a class="header-anchor" href="#cookie-localstorage-sessionstorage的区别" aria-label="Permalink to &quot;cookie  localStorage  sessionStorage的区别&quot;">​</a></h2><table><thead><tr><th>方式</th><th>生命周期</th><th>存储容量</th><th>存储位置</th></tr></thead><tbody><tr><td>cookie</td><td>可以设置失效时间</td><td>4KB</td><td>保存在客户端，每次请求都会带上</td></tr><tr><td>localStorage</td><td>永久存储除非手动清除</td><td>5MB</td><td>保存在客户端，不于服务端交互</td></tr><tr><td>sessionStorage</td><td>仅在当前会话窗口下生效，关闭后清除</td><td>5MB</td><td>保存在客户端，不于服务端交互</td></tr></tbody></table><h2 id="资源-script、link-加载的方式" tabindex="-1">资源（script、link）加载的方式 <a class="header-anchor" href="#资源-script、link-加载的方式" aria-label="Permalink to &quot;资源（script、link）加载的方式&quot;">​</a></h2><p>async、defer 是 script 标签的专属属性，对于网页中的其他资源，可以通过 link 的 preload、prefetch 属性来预加载</p><h4 id="正常模式" tabindex="-1">正常模式 <a class="header-anchor" href="#正常模式" aria-label="Permalink to &quot;正常模式&quot;">​</a></h4><p>这种情况下 JS 会阻塞 dom 渲染，浏览器必须等待 index.js 加载和执行完成后才能去做其它事情</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">src</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;index.js&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">src</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;index.js&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="async-模式" tabindex="-1">async 模式 <a class="header-anchor" href="#async-模式" aria-label="Permalink to &quot;async 模式&quot;">​</a></h4><p>async 模式下，它的加载是异步的，JS 不会阻塞 DOM 的渲染，async 加载是无顺序的，当它加载结束，JS 会立即执行 使用场景：若该 JS 资源与 DOM 元素没有依赖关系，也不会产生其他资源所需要的数据时，可以使用async 模式，比如埋点统计</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">src</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;index.js&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">async</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">src</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;index.js&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="defer-模式" tabindex="-1">defer 模式 <a class="header-anchor" href="#defer-模式" aria-label="Permalink to &quot;defer 模式&quot;">​</a></h4><p>defer 模式下，JS 的加载也是异步的，defer 资源会在 DOMContentLoaded 执行之前，并且 defer 是有顺序的加载 如果有多个设置了 defer 的 script 标签存在，则会按照引入的前后顺序执行，即便是后面的 script 资源先返回。defer 可以用来控制 JS 文件的执行顺序，比如 element-ui.js 和 vue.js，因为 element-ui.js 依赖于 vue，所以必须先引入 vue.js，再引入 element-ui.js</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">defer</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">src</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;index.js&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">defer</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">src</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;index.js&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="module-模式" tabindex="-1">module 模式 <a class="header-anchor" href="#module-模式" aria-label="Permalink to &quot;module 模式&quot;">​</a></h4><p>在主流的现代浏览器中，script 标签的属性可以加上 type=&quot;module&quot;，浏览器会对其内部的 import 引用发起 HTTP 请求，获取模块内容。这时 script 的行为会像是 defer 一样，在后台下载，并且等待 DOM 解析。Vite 就是利用浏览器支持原生的 es module 模块，开发时跳过打包的过程，提升编译效率</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">type</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;module&quot;</span><span style="color:#E1E4E8;">&gt;import { a } from &#39;./a.js&#39;&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">type</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;module&quot;</span><span style="color:#24292E;">&gt;import { a } from &#39;./a.js&#39;&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="preload" tabindex="-1">preload <a class="header-anchor" href="#preload" aria-label="Permalink to &quot;preload&quot;">​</a></h4><p>link 标签的 preload 属性：用于提前加载一些需要的依赖，这些资源会优先加载</p><ol><li>preload 加载的资源是在浏览器渲染机制之前进行处理的，并且不会阻塞 onload 事件</li><li>preload 加载的 JS 脚本其加载和执行的过程是分离的，即 preload会预加载相应的脚本代码，待到需要时自行调用；</li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">link</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">rel</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;preload&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">as</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;script&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">href</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;index.js&quot;</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">link</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">rel</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;preload&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">as</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;script&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">href</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;index.js&quot;</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="prefetch" tabindex="-1">prefetch <a class="header-anchor" href="#prefetch" aria-label="Permalink to &quot;prefetch&quot;">​</a></h4><p>prefetch 是利用浏览器的空闲时间，加载页面将来可能用到的资源的一种机制；通常可以用于加载其他页面（非首页）所需要的资源，以便加快后续页面的打开速度</p><ol><li>pretch 加载的资源可以获取非当前页面所需要的资源，并且将其放入缓存至少5分钟（无论资源是否可以缓存）</li><li>当页面跳转时，未完成的 prefetch 请求不会被中断</li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">link</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">rel</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;prefetch&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">as</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;script&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">href</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;index.js&quot;</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">link</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">rel</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;prefetch&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">as</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;script&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">href</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;index.js&quot;</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="前端路由" tabindex="-1">前端路由 <a class="header-anchor" href="#前端路由" aria-label="Permalink to &quot;前端路由&quot;">​</a></h2><blockquote><p>用来描述URL与UI界面的一种映射关系</p></blockquote><h4 id="hash-和-history-模式区别" tabindex="-1">hash 和 history 模式区别 <a class="header-anchor" href="#hash-和-history-模式区别" aria-label="Permalink to &quot;hash 和 history 模式区别&quot;">​</a></h4><ol><li>hash的URL地址拼接#号，history没有</li><li>刷新页面时hash会加载#号后对应的页面，history会报错</li><li>hash在#号后的路径发生变化触发<code>onhashchange</code>事件，history通过H5新增的<code>pushState</code>，<code>replaceState</code>，<code>popState</code>来修改历史记</li><li>history需要后端服务配置，否则会出现<strong>404</strong></li></ol><h2 id="js-的事件循环" tabindex="-1">JS 的事件循环 <a class="header-anchor" href="#js-的事件循环" aria-label="Permalink to &quot;JS 的事件循环&quot;">​</a></h2><p>渲染主线程一开始进入一个无限循环，每次循环都会检查事件队列中是否存在任务。如果有就取出事件队列中的第一个执行，没有就进入休眠状态。主线程和其他线程可以随时向事件队列中添加任务，新任务添加在队列末尾。整个过程称之为<a href="/webdocs/interview/browser/eventloop.html">事件循环</a>。</p><h4 id="宏任务-宏队列" tabindex="-1">宏任务（宏队列） <a class="header-anchor" href="#宏任务-宏队列" aria-label="Permalink to &quot;宏任务（宏队列）&quot;">​</a></h4><p>通常包括用户交互事件（如点击、滚动）、网络请求、定时器等(<code>setTimeout</code>、<code>setInterval</code>、<code>XHR</code>、<code>Fetch</code>、<code>addEventListener</code>)</p><h4 id="微任务-微队列" tabindex="-1">微任务（微队列） <a class="header-anchor" href="#微任务-微队列" aria-label="Permalink to &quot;微任务（微队列）&quot;">​</a></h4><p>用户存放需要最快执行的任务，优先级「最高」。添加任务到微队列的主要方式主要是使用 <code>Promise</code>、<code>MutationObserver</code></p>',42),n=[t];function p(r,c,i,d,h,y){return a(),e("div",null,n)}const b=s(l,[["render",p]]);export{E as __pageData,b as default};
